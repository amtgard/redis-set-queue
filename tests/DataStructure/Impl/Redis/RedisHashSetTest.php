<?php

namespace DataStructure\Impl\Redis;

use Amtgard\SetQueue\DataStructure\Entry;
use Amtgard\SetQueue\DataStructure\Impl\Redis\RedisHashSet;
use PHPUnit\Framework\TestCase;
use Redis;

class RedisHashSetTest extends TestCase
{
    private $set;

    private Redis $redis;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->redis = new Redis();
        $this->redis->pconnect('127.0.0.1', 36379);
        if ($this->redis->isConnected()) {
            $this->redis->del("TEST:set");
        }
        $this->set = new RedisHashSet("TEST", $this->redis);
    }

    public function reset(): void {
        if (!$this->redis->isConnected()) {
            $this->markTestSkipped('Redis connection not established');
        } else {
            $this->redis->del("TEST:set");
        }
    }

    public function testWhenAddKey_ContainsKey() {
        $this->reset();

        $entry = new Entry("KEY", "VALUE");
        $this->set->add($entry);
        \PHPUnit\Framework\assertTrue($this->set->contains("KEY"));
    }

    public function testWhenValueRemoved_thenNotContained() {
        $entry1 = new Entry("KEY1", "VALUE1");
        $entry2 = new Entry("KEY2", "VALUE2");
        $this->set->add($entry1);
        $this->set->add($entry2);
        \PHPUnit\Framework\assertEquals("VALUE1", $this->set->remove("KEY1"));
        \PHPUnit\Framework\assertFalse($this->set->contains("KEY1"));
    }

    public function testWhenKeyNotAdded_thenNotContained() {
        \PHPUnit\Framework\assertFalse($this->set->contains("KEY"));
    }

    public function testWhenKeyIsAdded_thenGetReturnsValue() {
        $entry = new Entry("KEY", "VALUE");
        $this->set->add($entry);
        \PHPUnit\Framework\assertEquals("VALUE", $this->set->get("KEY"));
    }

    public function testWhenKeyIsRemoved_thenGetReturnsNull() {
        $entry = new Entry("KEY", "VALUE");
        $this->set->add($entry);
        $this->set->remove("KEY");
        \PHPUnit\Framework\assertNull($this->set->get("KEY"));
    }

    public function testWhenKeyIsNotAdded_thenGetReturnsNull() {
        \PHPUnit\Framework\assertNull($this->set->get("KEY"));
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        if ($this->redis->isConnected()) {
            $this->redis->del("TEST:set");
            $this->redis->close();
        }
    }
}