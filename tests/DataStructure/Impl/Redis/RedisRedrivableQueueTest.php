<?php

namespace DataStructure\Impl\Redis;

use Amtgard\SetQueue\DataStructure\Impl\Redis\RedisRedrivableQueue;
use PHPUnit\Framework\TestCase;
use Redis;
use function PHPUnit\Framework\assertEquals;
use function PHPUnit\Framework\assertNull;

class RedisRedrivableQueueTest extends TestCase
{
    private $queue;

    private Redis $redis;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->redis = new Redis();
        $this->redis->pconnect('127.0.0.1', 36379);
        if ($this->redis->isConnected()) {
            $this->redis->del("TEST:queue");
            $this->redis->del("TEST:redrive");
        }
        $this->queue = new RedisRedrivableQueue("TEST", $this->redis);
    }

    public function reset(): void {
        if (!$this->redis->isConnected()) {
            $this->markTestSkipped('Redis connection not established');
        } else {
            $this->redis->del("TEST:queue");
            $this->redis->del("TEST:redrive");
        }
    }

    public function testQueueFifo() {
        $this->reset();

        $this->queue->enqueue("ENTRY1");
        $this->queue->enqueue("ENTRY2");
        $this->queue->enqueue("ENTRY3");
        assertEquals(["ENTRY1"], $this->queue->dequeue());
        assertEquals(["ENTRY2"], $this->queue->dequeue());
        assertEquals(["ENTRY3"], $this->queue->dequeue());
    }

    public function testRedriveRequeues()
    {
        $this->reset();

        $this->queue->enqueue("ENTRY1");
        assertEquals(["ENTRY1"], $this->queue->dequeue());
        $null = $this->queue->dequeue();
        assertNull($null[0]);
        $this->queue->redrive();
        $entry = $this->queue->dequeue();
        assertEquals(["ENTRY1"], $entry);
    }

    public function testWhenCommit_thenNotRequeued() {
        $this->reset();

        $this->queue->enqueue("ENTRY1");
        assertEquals(["ENTRY1"], $this->queue->dequeue());
        assertNull($this->queue->dequeue()[0]);
        $this->queue->commit("ENTRY1");
        $this->queue->redrive();
        assertNull($this->queue->dequeue()[0]);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        if ($this->redis->isConnected()) {
            $this->redis->del("TEST:queue");
            $this->redis->del("TEST:redrive");
            $this->redis->close();
        }
    }
}