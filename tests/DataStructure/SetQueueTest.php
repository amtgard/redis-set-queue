<?php

namespace DataStructure;

use Amtgard\SetQueue\DataStructure\DataStructureConfig;
use Amtgard\SetQueue\DataStructure\Entry;
use Amtgard\SetQueue\DataStructure\HashSet;
use Amtgard\SetQueue\DataStructure\HashSetFactory;
use Amtgard\SetQueue\DataStructure\RedrivableQueue;
use Amtgard\SetQueue\DataStructure\RedrivableQueueFactory;
use Amtgard\SetQueue\DataStructure\SetQueue;
use Phake;
use PHPUnit\Framework\TestCase;

class SetQueueTest extends TestCase
{

    private SetQueue $setQueue;

    private HashSetFactory $mockSetFactory;

    private RedrivableQueueFactory $mockRedrivableQueueFactory;

    private HashSet $mockSet;

    private RedrivableQueue $mockQueue;

    private DataStructureConfig $config;

    protected function beforeEach(): void {
        Phake::reset($this->mockSetFactory);
        Phake::reset($this->mockRedrivableQueueFactory);
        Phake::when($this->mockSetFactory)->create($this->config, "SETQUEUE_NAME")->thenReturn($this->mockSet);
        Phake::when($this->mockRedrivableQueueFactory)->create($this->config, "SETQUEUE_NAME")->thenReturn($this->mockQueue);

        Phake::when($this->mockSet)->add("KEY", "VALUE")->thenReturn("VALUE");
        Phake::when($this->mockSet)->contains("KEY")->thenReturn(true);
        Phake::when($this->mockSet)->remove("KEY")->thenReturn("VALUE");
        Phake::when($this->mockSet)->get("KEY")->thenReturn("VALUE");
        Phake::when($this->mockSet)->getList(["KEY"])->thenReturn(["VALUE"]);

        Phake::when($this->mockQueue)->enqueue("KEY");
        Phake::when($this->mockQueue)->dequeue(1)->thenReturn(["KEY"]);
        Phake::when($this->mockQueue)->commit();
        Phake::when($this->mockQueue)->redrive();

    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->config = Phake::mock(DataStructureConfig::class);
        $this->mockSet = Phake::mock(HashSet::class);
        $this->mockQueue = Phake::mock(RedrivableQueue::class);
        $this->mockSetFactory = Phake::mock(HashSetFactory::class);
        $this->mockRedrivableQueueFactory = Phake::mock(RedrivableQueueFactory::class);

        $this->beforeEach();
        $this->setQueue = new SetQueue("SETQUEUE_NAME", $this->config, $this->mockSetFactory, $this->mockRedrivableQueueFactory);
    }

    public function testGetName() {
        $this->beforeEach();
        self::assertEquals("SETQUEUE_NAME", $this->setQueue->getName());
    }

    public function testEnqueueDequeue() {
        $this->beforeEach();

        $this->setQueue->enqueue("KEY", "VALUE");
        $entry = new Entry("KEY");
        $entry->setMessage("VALUE");
        $response = $this->setQueue->dequeue();
        self::assertEquals([$entry], $response);
    }

}