<?php

namespace DataStructure;

use Amtgard\SetQueue\DataStructure\DataStructureConfig;
use Amtgard\SetQueue\DataStructure\Entry;
use Amtgard\SetQueue\DataStructure\HashSetFactory;
use Amtgard\SetQueue\DataStructure\Impl\InMemory\InMemoryHashSetFactory;
use Amtgard\SetQueue\DataStructure\Impl\InMemory\InMemoryRedrivableQueueFactory;
use Amtgard\SetQueue\DataStructure\Impl\Redis\RedisDataStructureConfig;
use Amtgard\SetQueue\DataStructure\Impl\Redis\RedisHashSetFactory;
use Amtgard\SetQueue\DataStructure\Impl\Redis\RedisRedrivableQueueFactory;
use Amtgard\SetQueue\DataStructure\RedrivableQueueFactory;
use Amtgard\SetQueue\DataStructure\SetQueue;
use Phake;
use PHPUnit\Framework\TestCase;
use Redis;
use function PHPUnit\Framework\assertEquals;
use function PHPUnit\Framework\assertNull;

class IntegRedisSetQueueTest extends TestCase
{
    private SetQueue $queue;
    private HashSetFactory $hashSetFactory;
    private RedrivableQueueFactory $redrivableQueueFactory;
    private Redis $redis;

    protected function setUp(): void
    {
        parent::setUp();
        $config = new RedisDataStructureConfig();
        $config->setConfig([
            'host' => '127.0.0.1',
            'port' => 36379,
        ]);
        $this->redis = new Redis();
        $this->redis->pconnect($config->getConfig()['host'], $config->getConfig()['port']);
        if ($this->redis->isConnected()) {
            $this->redis->del("TEST:set");
            $this->redis->del("TEST:queue");
            $this->redis->del("TEST:redrive");
        }
        $this->hashSetFactory = new RedisHashSetFactory();
        $this->redrivableQueueFactory = new RedisRedrivableQueueFactory();
        $this->queue = new SetQueue("TEST", $config, $this->hashSetFactory, $this->redrivableQueueFactory);
    }

    public function reset(): void {
        if (!$this->redis->isConnected()) {
            $this->markTestSkipped('Redis connection not established');
        } else {
            $this->redis->del("TEST:set");
            $this->redis->del("TEST:queue");
            $this->redis->del("TEST:redrive");
        }
    }

    public function testQueueFifo() {
        $this->reset();

        $this->queue->enqueue("KEY1", "VALUE1");
        $this->queue->enqueue("KEY2", "VALUE2");
        $this->queue->enqueue("KEY3", "VALUE3");
        $entry1 = new Entry("KEY1");
        $entry1->message = "VALUE1";
        $entry2 = new Entry("KEY2");
        $entry2->message = "VALUE2";
        $entry3 = new Entry("KEY3");
        $entry3->message = "VALUE3";
        assertEquals($entry1, $this->queue->dequeue());
        assertEquals($entry2, $this->queue->dequeue());
        assertEquals($entry3, $this->queue->dequeue());
    }

    public function testRedriveRequeues()
    {
        $this->reset();

        $this->queue->enqueue("KEY1", "VALUE1");
        $entry1 = new Entry("KEY1");
        $entry1->message = "VALUE1";
        assertEquals($entry1, $this->queue->dequeue());
        $null = $this->queue->dequeue();
        assertNull($null);
        $this->queue->redrive();
        assertEquals($entry1, $this->queue->dequeue());
    }

    public function testWhenCommit_thenNotRequeued() {
        $this->reset();

        $this->queue->enqueue("KEY1", "VALUE1");
        $entry1 = new Entry("KEY1");
        $entry1->message = "VALUE1";
        assertEquals($entry1, $this->queue->dequeue());
        assertNull($this->queue->dequeue());
        $this->queue->commit("KEY1");
        $this->queue->redrive();
        assertNull($this->queue->dequeue());
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        if ($this->redis->isConnected()) {
            $this->redis->del("TEST:set");
            $this->redis->del("TEST:queue");
            $this->redis->del("TEST:redrive");
            $this->redis->close();
        }
    }
}